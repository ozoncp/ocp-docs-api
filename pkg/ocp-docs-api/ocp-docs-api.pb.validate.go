// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-docs-api/ocp-docs-api.proto

package ocp_docs_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListDocsV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListDocsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListDocsV1RequestValidationError is the validation error returned by
// ListDocsV1Request.Validate if the designated constraints aren't met.
type ListDocsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocsV1RequestValidationError) ErrorName() string {
	return "ListDocsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocsV1RequestValidationError{}

// Validate checks the field values on ListDocsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDocsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDocs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocsV1ResponseValidationError{
					field:  fmt.Sprintf("Docs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListDocsV1ResponseValidationError is the validation error returned by
// ListDocsV1Response.Validate if the designated constraints aren't met.
type ListDocsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocsV1ResponseValidationError) ErrorName() string {
	return "ListDocsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocsV1ResponseValidationError{}

// Validate checks the field values on DescribeDocV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeDocV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return DescribeDocV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeDocV1RequestValidationError is the validation error returned by
// DescribeDocV1Request.Validate if the designated constraints aren't met.
type DescribeDocV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDocV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDocV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDocV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDocV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDocV1RequestValidationError) ErrorName() string {
	return "DescribeDocV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDocV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDocV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDocV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDocV1RequestValidationError{}

// Validate checks the field values on DescribeDocV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeDocV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDoc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeDocV1ResponseValidationError{
				field:  "Doc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeDocV1ResponseValidationError is the validation error returned by
// DescribeDocV1Response.Validate if the designated constraints aren't met.
type DescribeDocV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDocV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDocV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDocV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDocV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDocV1ResponseValidationError) ErrorName() string {
	return "DescribeDocV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDocV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDocV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDocV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDocV1ResponseValidationError{}

// Validate checks the field values on CreateDocV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDocV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Link

	// no validation rules for SourceLink

	return nil
}

// CreateDocV1RequestValidationError is the validation error returned by
// CreateDocV1Request.Validate if the designated constraints aren't met.
type CreateDocV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocV1RequestValidationError) ErrorName() string {
	return "CreateDocV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocV1RequestValidationError{}

// Validate checks the field values on CreateDocV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDocV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateDocV1ResponseValidationError is the validation error returned by
// CreateDocV1Response.Validate if the designated constraints aren't met.
type CreateDocV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocV1ResponseValidationError) ErrorName() string {
	return "CreateDocV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocV1ResponseValidationError{}

// Validate checks the field values on RemoveDocV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveDocV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return RemoveDocV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveDocV1RequestValidationError is the validation error returned by
// RemoveDocV1Request.Validate if the designated constraints aren't met.
type RemoveDocV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocV1RequestValidationError) ErrorName() string {
	return "RemoveDocV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocV1RequestValidationError{}

// Validate checks the field values on RemoveDocV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveDocV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveDocV1ResponseValidationError is the validation error returned by
// RemoveDocV1Response.Validate if the designated constraints aren't met.
type RemoveDocV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocV1ResponseValidationError) ErrorName() string {
	return "RemoveDocV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocV1ResponseValidationError{}

// Validate checks the field values on UpdateDocV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDocV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDoc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDocV1RequestValidationError{
				field:  "Doc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateDocV1RequestValidationError is the validation error returned by
// UpdateDocV1Request.Validate if the designated constraints aren't met.
type UpdateDocV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocV1RequestValidationError) ErrorName() string {
	return "UpdateDocV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocV1RequestValidationError{}

// Validate checks the field values on UpdateDocV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDocV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// UpdateDocV1ResponseValidationError is the validation error returned by
// UpdateDocV1Response.Validate if the designated constraints aren't met.
type UpdateDocV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocV1ResponseValidationError) ErrorName() string {
	return "UpdateDocV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocV1ResponseValidationError{}

// Validate checks the field values on MultiCreateDocsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateDocsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDocs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateDocsV1RequestValidationError{
					field:  fmt.Sprintf("Docs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateDocsV1RequestValidationError is the validation error returned by
// MultiCreateDocsV1Request.Validate if the designated constraints aren't met.
type MultiCreateDocsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateDocsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateDocsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateDocsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateDocsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateDocsV1RequestValidationError) ErrorName() string {
	return "MultiCreateDocsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateDocsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateDocsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateDocsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateDocsV1RequestValidationError{}

// Validate checks the field values on MultiCreateDocsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateDocsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DocsAdded

	return nil
}

// MultiCreateDocsV1ResponseValidationError is the validation error returned by
// MultiCreateDocsV1Response.Validate if the designated constraints aren't met.
type MultiCreateDocsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateDocsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateDocsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateDocsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateDocsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateDocsV1ResponseValidationError) ErrorName() string {
	return "MultiCreateDocsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateDocsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateDocsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateDocsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateDocsV1ResponseValidationError{}

// Validate checks the field values on Doc with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Doc) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Link

	// no validation rules for SourceLink

	return nil
}

// DocValidationError is the validation error returned by Doc.Validate if the
// designated constraints aren't met.
type DocValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocValidationError) ErrorName() string { return "DocValidationError" }

// Error satisfies the builtin error interface
func (e DocValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocValidationError{}
